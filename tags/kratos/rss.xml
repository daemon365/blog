<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kratos on Daemon</title><link>https://daemon365.dev/tags/kratos/</link><description>Recent content in Kratos on Daemon</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 29 Jun 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/kratos/rss.xml" rel="self" type="application/rss+xml"/><item><title>kratos http原理</title><link>https://daemon365.dev/post/kratos/kratos_http_principle/</link><pubDate>Thu, 29 Jun 2023 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/kratos_http_principle/</guid><description>&lt;h2 id="概念">概念
&lt;a class="header-anchor" href="#%e6%a6%82%e5%bf%b5">&lt;/a>
&lt;/h2>&lt;p>
&lt;a href="https://github.com/go-kratos/kratos" title="kratos" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 kratos
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a> 为了使http协议的逻辑代码和grpc的逻辑代码使用同一份，选择了基于protobuf的IDL文件使用proto插件生成辅助代码的方式。&lt;/p></description></item><item><title>Go工程化 - 依赖注入</title><link>https://daemon365.dev/post/kratos/go_engineering___dependency_injection/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/go_engineering___dependency_injection/</guid><description>&lt;p>我们在微服务框架
&lt;a href="https://github.com/go-kratos/kratos" title="kratos v2" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 kratos v2
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>的默认项目模板中
&lt;a href="https://github.com/go-kratos/kratos-layout" title="kratos-layout" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 kratos-layout
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>使用了
&lt;a href="https://github.com/google/wire" title="google/wire" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 google/wire
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>进行依赖注入，也建议开发者在维护项目时使用该工具。&lt;/p>
&lt;p>wire 乍看起来比较违反直觉，导致很多同学不理解为什么要用或不清楚如何用（也包括曾经的我），本文来帮助大家理解 wire 的使用。&lt;/p></description></item><item><title>kratos v2版本命令行工具使用</title><link>https://daemon365.dev/post/kratos/kratos_v2_command_line_tool_usage/</link><pubDate>Sun, 12 Sep 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/kratos_v2_command_line_tool_usage/</guid><description>&lt;h2 id="使用">使用
&lt;a class="header-anchor" href="#%e4%bd%bf%e7%94%a8">&lt;/a>
&lt;/h2>&lt;h3 id="下载">下载
&lt;a class="header-anchor" href="#%e4%b8%8b%e8%bd%bd">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/go-kratos/kratos/cmd/kratos/v2@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看是否安装成功&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kratos -v
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kratos version v2.1.3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="升级">升级
&lt;a class="header-anchor" href="#%e5%8d%87%e7%ba%a7">&lt;/a>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kratos upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查看帮助">查看帮助
&lt;a class="header-anchor" href="#%e6%9f%a5%e7%9c%8b%e5%b8%ae%e5%8a%a9">&lt;/a>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">kratos&lt;/span> &lt;span style="color:#f92672">--&lt;/span>&lt;span style="color:#a6e22e">help&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>Kratos: An elegant toolkit &lt;span style="color:#66d9ef">for&lt;/span> Go microservices&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Usage:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> kratos [command]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Available Commands:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> changelog Get a kratos change log
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> completion generate the autocompletion script &lt;span style="color:#66d9ef">for&lt;/span> the specified shell
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> help Help about any command
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> new Create a service template
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> proto Generate the proto files
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> run Run project
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> upgrade Upgrade the kratos tools
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Flags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>h, &lt;span style="color:#f92672">--&lt;/span>help help &lt;span style="color:#66d9ef">for&lt;/span> kratos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">-&lt;/span>v, &lt;span style="color:#f92672">--&lt;/span>version version &lt;span style="color:#66d9ef">for&lt;/span> kratos
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Use &lt;span style="color:#e6db74">&amp;#34;kratos [command] --help&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> more information about a command&lt;span style="color:#f92672">.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="new命令">new命令
&lt;a class="header-anchor" href="#new%e5%91%bd%e4%bb%a4">&lt;/a>
&lt;/h2>&lt;p>kratos new 命令为创建一个kratos项目&lt;/p></description></item><item><title>从kratos分析breaker熔断器源码实现</title><link>https://daemon365.dev/post/kratos/analyzing_the_breaker_fuse_source_code_implementation_from_kratos/</link><pubDate>Sat, 04 Sep 2021 17:55:01 +0800</pubDate><guid>https://daemon365.dev/post/kratos/analyzing_the_breaker_fuse_source_code_implementation_from_kratos/</guid><description>&lt;h2 id="为什么要用熔断">为什么要用熔断
&lt;a class="header-anchor" href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e7%94%a8%e7%86%94%e6%96%ad">&lt;/a>
&lt;/h2>&lt;p>前面我们讲过限流保证服务的可用性，不被突如其来的流量打爆。但是两种情况是限流解决不了的。&lt;/p>
&lt;ol>
&lt;li>如果我们服务只能处理1000QPS，但是有10wQPS打过来，服务还是会炸。因为拒绝请求也需要成本。&lt;/li>
&lt;li>服务但是io型的，会把mysql，redis，mq等中间件打挂。&lt;/li>
&lt;/ol>
&lt;p>所以，我们遵循一个思路，可不可以client端在失败的多的时候就不调用了，直接返回错误呢？&lt;/p></description></item><item><title>从kratos分析BBR限流源码实现</title><link>https://daemon365.dev/post/kratos/analyzing_the_implementation_of_bbr_current_limiting_source_code_from_kratos/</link><pubDate>Sat, 04 Sep 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/analyzing_the_implementation_of_bbr_current_limiting_source_code_from_kratos/</guid><description>&lt;h2 id="什么是自适应限流">什么是自适应限流
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e8%87%aa%e9%80%82%e5%ba%94%e9%99%90%e6%b5%81">&lt;/a>
&lt;/h2>&lt;p>自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。&lt;/p></description></item><item><title>Kratos漫游指南 1 - 概览</title><link>https://daemon365.dev/post/kratos/the_hitchhikers_guide_to_kratos_1___overview/</link><pubDate>Thu, 02 Sep 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/the_hitchhikers_guide_to_kratos_1___overview/</guid><description>&lt;p>您好，地球人，欢迎来到Kratos漫游指南。&lt;/p>
&lt;p>对于刚开始研究Kratos框架的开发者来说，目前的文档有些零散，这与我们的模块化设计有一些关系，不过Don&amp;rsquo;t panic，从这篇文章开始，我将试图打破这一现状，漫游指南系列将循序渐进地介绍Kratos框架，理顺框架的使用思路，使您更快上手Kratos。&lt;/p></description></item><item><title>基于 OpenTelemetry 的链路追踪</title><link>https://daemon365.dev/post/kratos/link_tracing_based_on_opentelemetry/</link><pubDate>Mon, 23 Aug 2021 18:11:50 +0800</pubDate><guid>https://daemon365.dev/post/kratos/link_tracing_based_on_opentelemetry/</guid><description>&lt;h2 id="链路追踪的前世今生">链路追踪的前世今生
&lt;a class="header-anchor" href="#%e9%93%be%e8%b7%af%e8%bf%bd%e8%b8%aa%e7%9a%84%e5%89%8d%e4%b8%96%e4%bb%8a%e7%94%9f">&lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>分布式跟踪（也称为分布式请求跟踪）是一种用于分析和监控应用程序的方法，尤其是使用微服务架构构建的应用程序。分布式跟踪有助于精确定位故障发生的位置以及导致性能差的原因。&lt;/p></description></item><item><title>通过 layout 探索 kratos 运行原理</title><link>https://daemon365.dev/post/kratos/explore_the_working_principle_of_kratos_through_layout/</link><pubDate>Fri, 20 Aug 2021 18:11:50 +0800</pubDate><guid>https://daemon365.dev/post/kratos/explore_the_working_principle_of_kratos_through_layout/</guid><description>&lt;h2 id="创建项目">创建项目
&lt;a class="header-anchor" href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">&lt;/a>
&lt;/h2>&lt;p>首先需要安装好对应的依赖环境，以及工具：&lt;/p>
&lt;ol>
&lt;li>go
&lt;ul>
&lt;li>
&lt;a href="https://studygolang.com/dl" title="下载" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 下载
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>protoc
&lt;ul>
&lt;li>&lt;code>go install google.golang.org/protobuf/cmd/protoc-gen-go@latest&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>protoc-gen-go
&lt;ul>
&lt;li>&lt;code>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 创建项目模板&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kratos new helloworld
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd helloworld
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 拉取项目依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>go mod download
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 生成proto模板&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kratos proto add api/helloworld/helloworld.proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 生成proto源码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kratos proto client api/helloworld/helloworld.proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 生成server模板&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kratos proto server api/helloworld/helloworld.proto -t internal/service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行命令后,会在当前目录下生成一个 service 工程,工程骨架如下,具体的工程骨架说明可以访问 
&lt;a href="https://go-kratos.dev/docs/intro/layout" title="layout" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 layout
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>&lt;/p></description></item><item><title>kratos 日志库的使用姿势</title><link>https://daemon365.dev/post/kratos/how_to_use_the_log_library/</link><pubDate>Thu, 19 Aug 2021 18:11:50 +0800</pubDate><guid>https://daemon365.dev/post/kratos/how_to_use_the_log_library/</guid><description>&lt;h2 id="什么是日志">什么是日志
&lt;a class="header-anchor" href="#%e4%bb%80%e4%b9%88%e6%98%af%e6%97%a5%e5%bf%97">&lt;/a>
&lt;/h2>&lt;blockquote>
&lt;p>所谓日志（Log）是指系统所指定对象的某些操作和其操作结果按时间有序的集合。log文件就是日志文件，log文件记录了系统和系统的用户之间交互的信息，是自动捕获人与系统终端之间交互的类型、内容或时间的数据收集方法。&lt;/p></description></item></channel></rss>