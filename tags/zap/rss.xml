<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zap on Daemon</title><link>https://daemon365.dev/tags/zap/</link><description>Recent content in Zap on Daemon</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Tue, 23 Mar 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/zap/rss.xml" rel="self" type="application/rss+xml"/><item><title>zap高性能日志</title><link>https://daemon365.dev/post/go/zap_high_performance_log/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/go/zap_high_performance_log/</guid><description>&lt;h2 id="摘要">摘要
&lt;a class="header-anchor" href="#%e6%91%98%e8%a6%81">&lt;/a>
&lt;/h2>&lt;p>日志在整个工程实践中的重要性不言而喻，在选择日志组件的时候也有多方面的考量。详细、正确和及时的反馈是必不可少的，但是整个性能表现是否也是必要考虑的点呢？在长期的实践中发现有的日志组件对于计算资源的消耗十分巨大，这将导致整个服务成本的居高不下。此文从设计原理深度分析了 zap 的设计与实现上的权衡，也希望整个的选择、考量的过程能给其他的技术团队在开发高性能的 Go 组件时带来一定的借鉴意义。&lt;/p></description></item></channel></rss>