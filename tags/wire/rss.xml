<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wire on Daemon</title><link>https://daemon365.dev/tags/wire/</link><description>Recent content in Wire on Daemon</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Thu, 30 Sep 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://daemon365.dev/tags/wire/rss.xml" rel="self" type="application/rss+xml"/><item><title>Go工程化 - 依赖注入</title><link>https://daemon365.dev/post/kratos/go_engineering___dependency_injection/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0800</pubDate><guid>https://daemon365.dev/post/kratos/go_engineering___dependency_injection/</guid><description>&lt;p>我们在微服务框架
&lt;a href="https://github.com/go-kratos/kratos" title="kratos v2" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 kratos v2
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>的默认项目模板中
&lt;a href="https://github.com/go-kratos/kratos-layout" title="kratos-layout" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 kratos-layout
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>使用了
&lt;a href="https://github.com/google/wire" title="google/wire" rel="noopener external nofollow noreferrer" target="_blank" class=" exturl">
 google/wire
 
 &lt;i class="fa fa-external-link-alt">&lt;/i>
 
&lt;/a>进行依赖注入，也建议开发者在维护项目时使用该工具。&lt;/p>
&lt;p>wire 乍看起来比较违反直觉，导致很多同学不理解为什么要用或不清楚如何用（也包括曾经的我），本文来帮助大家理解 wire 的使用。&lt;/p></description></item></channel></rss>